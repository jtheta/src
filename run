#!/usr/bin/env node
require('ts-node').register()
require('tsconfig-paths').register()

// bluebird for parallel file loading
const Promise = require('bluebird')
const path = require('path')
const glob = Promise.promisify(require('glob'))
const fs = require('fs-extra')
const sh = require('./dev/sh')
const startDebugger = require('./dev/debugger').startDebugger

// repo directories
const ROOT = __dirname
const BLD = path.join(ROOT, 'bld')
const CMP = path.join(ROOT, 'cmp')
const DEV = path.join(ROOT, 'dev')

// parse the arguments to the `run` script itself
const argv = process.argv
const exe  = argv.shift()
const runPath = argv.shift()
const cmd = argv.shift()
const args = argv

// this is similar to package.json scripts object
const cmds = {
  test,
  tsn,
  build,
  find,
  startDebugger
}

// cmd to execute
const target = cmds[cmd]

if (!target) {
  console.error(`could not find script ${cmd}`)
}

switch (typeof target) {
  case 'string':
    sh(target)
    break
  case 'function':
    target(...args)
      .catch(console.error)
    break
}

// find component files
// uses https://github.com/isaacs/node-glob
// ex. find('*.yml') => all config files
async function find(target, scope) {
  const cmps = scope ? [scope] : await listComponents()
  let promises = []
  for (let comp of cmps) {
    const dir = path.join(CMP, comp)

    promises.push(
        glob(path.join('.', target), {cwd: dir})
          .then(matched => matched.map(p => ({
            path: path.join(dir, p),
            comp,
            dir
          })
        )
      )
    )
  }

  const results = await Promise.all(promises)
  const flat = []
  for (let cmp of results) {
    for (let f of cmp) {
      flat.push(f)
    }
  }

  return flat
}

// list all platform components
async function listComponents() {
  const files = await fs.readdir(CMP)
  const result = []
  for (let file of files) {
    const cPath = path.join(CMP, file)
    const stat = await fs.stat(cPath)
    if (stat.isDirectory()) {
      result.push(file)
    }
  }
  return result
}

// the `test` script
// run all tests in parellel
async function test(comp) {
  const TEST_PATTERN = 'test/**/*.test.ts'
  const tests = await find(TEST_PATTERN, comp)
  console.log(`found ${tests.length} tests...`)

  return Promise.all(tests.map(t => tsn(t.path)))
}

async function tsn(scriptPath) {
  scriptPath = scriptPath.replace(ROOT, '.')
  const tsPath = path.join('node_modules', '.bin', 'ts-node')
  const tstPath = path.join('tsconfig-paths', 'register')
  sh(`${tsPath} -r ${tstPath} ${scriptPath}`, {TS_NODE_CACHE: true})
}

async function build() {
  tsn(path.join(BLD, 'bld.ts'))
}