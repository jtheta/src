#!/usr/bin/env node
require('ts-node').register()
require('tsconfig-paths').register()

// bluebird for parallel file loading
const Promise = require('bluebird')
const path = require('path')
const sh = require('./dev/sh').default
const todos = require('./dev/todo').todos
const find = require('./dev/find').find

// repo directories
const ROOT = __dirname
const BLD = path.join(ROOT, 'bld')
const CMP = path.join(ROOT, 'cmp')
const DEV = path.join(ROOT, 'dev')

// parse the arguments to the `run` script itself
const argv = process.argv
const exe  = argv.shift()
const runPath = argv.shift()
const cmd = argv.shift()
const args = argv

// this is similar to package.json scripts object
const cmds = {
  test,
  tsn,
  build,
  find,
  todos
}

// cmd to execute
const target = cmds[cmd]

if (!target) {
  console.error(`could not find script ${cmd}`)
}

switch (typeof target) {
  case 'string':
    sh(target)
    break
  case 'function':
    target(...args)
      .catch(console.error)
    break
}


// the `test` script
// run all tests in parellel
async function test(comp) {
  const TEST_PATTERN = 'test/**/*.test.ts'
  const tests = await find(TEST_PATTERN, comp)
  console.log(`found ${tests.length} tests...`)

  return Promise.all(tests.map(t => tsn(t.path)))
}

async function tsn(scriptPath) {
  scriptPath = scriptPath.replace(ROOT, '.')
  const tsPath = path.join('node_modules', '.bin', 'ts-node')
  const tstPath = path.join('tsconfig-paths', 'register')
  sh(`${tsPath} -r ${tstPath} ${scriptPath}`, {TS_NODE_CACHE: true})
}

async function build() {
  tsn(path.join(BLD, 'bld.ts'))
}